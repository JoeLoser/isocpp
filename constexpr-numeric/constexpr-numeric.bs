<pre class='metadata'>
Title: constexpr for &lt;numeric&gt;
Status: D
ED: https://elbeno.github.io/isocpp/constexpr-numeric/constexpr-numeric.html
Shortname: Dxxx
Level: 0
Date: 2019-03-17
Editor: Ben Deane, ben at elbeno dot com
Group: wg21
Audience: LEWG
Markup Shorthands: markdown yes
Default Highlight: C++
Abstract: We have made many algorithms <code>constexpr</code> for C++20, but we seem to have forgotten the algorithms in <code>&lt;numeric&gt;</code>.
</pre>

<pre class="biblio">
{
    "P0879": {
        "authors": ["Antony Polukhin"],
        "title": "Constexpr for swap and swap related functions",
        "href": "https://wg21.link/P0879",
        "date": "2017-12-29"
    }
}
</pre>

<style>
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}

.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
</style>

# Motivation # {#motivation}

We have added `constexpr` to many parts of the standard library for C++20.

Notably, [[P0879]] *Constexpr for swap and swap-related functions* added
`constexpr` to all functions in `<algorithm>` except `shuffle`, `sample`,
`stable_sort`, `stable_partition`, `inplace_merge`, and functions accepting an
`ExecutionPolicy`.

However, there are useful algorithms in `<numeric>` that we seem to have forgotten to add
`constexpr` to.

# Assumptions # {#assumptions}

This proposal makes the same assumptions as [[P0879]], *viz.*:

- if an algorithm uses compiler intrinsics, then those intrinsics could be made `constexpr` by compiler vendors.
- if an algorithm uses assembly optimization, then that assembly could be turned into a `constexpr` compiler intrinsic.
- if an algorithm uses external functions, then those functions could be made `inline` and marked `constexpr` or could be replaced with intrinsics.
- modern compilers are good at code optimization, so a decently small amount of algorithms use assembly or intrinsics.

# Algorithms in `<numeric>` that were apparently forgotten about # {#forgotten}

This proposal is to add `constexpr` to the following function templates in `<numeric>`, excepting the function templates that accept an `ExecutionPolicy`.

- `accumulate`
- `reduce`
- `inner_product`
- `iota`
- `transform_reduce`
- `partial_sum`
- `exclusive_scan`
- `inclusive_scan`
- `transform_exclusive_scan`
- `transform_inclusive_scan`
- `adjacent_difference`
- `iota`

# Proposed wording relative to N4810 # {#wording}

Exactly as one would expect: add `constexpr` to the function templates listed above where they do not accept an `ExecutionPolicy`.


Change *Header* <tt>&lt;numeric&gt;</tt> *synopsis*, 25.8 [numeric.ops.overview] as indicated:
```
template<class InputIterator, class T>
  constexpr T accumulate(InputIterator first, InputIterator last, T init);
template<class InputIterator, class T, class BinaryOperation>
  constexpr T accumulate(InputIterator first, InputIterator last, T init, BinaryOperation binary_op);
```
```
template<class InputIterator>
  constexpr typename iterator_traits<InputIterator>::value_type
    reduce(InputIterator first, InputIterator last);
template<class InputIterator, class T>
  constexpr T reduce(InputIterator first, InputIterator last, T init);
template<class InputIterator, class T, class BinaryOperation>
  constexpr T reduce(InputIterator first, InputIterator last, T init, BinaryOperation binary_op);
```

```
template<class InputIterator1, class InputIterator2, class T>
  constexpr T inner_product(InputIterator1 first1, InputIterator1 last1,
                            InputIterator2 first2, T init);
template<class InputIterator1, class InputIterator2, class T,
         class BinaryOperation1, class BinaryOperation2>
  constexpr T inner_product(InputIterator1 first1, InputIterator1 last1,
                            InputIterator2 first2, T init,
                            BinaryOperation1 binary_op1,
                            BinaryOperation2 binary_op2);
```
```
template<class InputIterator1, class InputIterator2, class T>
  constexpr T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2,
                               T init);
template<class InputIterator1, class InputIterator2, class T,
         class BinaryOperation1, class BinaryOperation2>
  constexpr T transform_reduce(InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2,
                               T init,
                               BinaryOperation1 binary_op1,
                               BinaryOperation2 binary_op2);
template<class InputIterator, class T,
         class BinaryOperation, class UnaryOperation>
  constexpr T transform_reduce(InputIterator first, InputIterator last,
                               T init,
                               BinaryOperation binary_op, UnaryOperation unary_op);
```
```
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator partial_sum(InputIterator first,
                                       InputIterator last,
                                       OutputIterator result);
template<class InputIterator, class OutputIterator, class BinaryOperation>
  constexpr OutputIterator partial_sum(InputIterator first,
                                       InputIterator last,
                                       OutputIterator result,
                                       BinaryOperation binary_op);
```
```
template<class InputIterator, class OutputIterator, class T>
  constexpr OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                          OutputIterator result,
                                          T init);
template<class InputIterator, class OutputIterator, class T, class BinaryOperation>
  constexpr OutputIterator exclusive_scan(InputIterator first, InputIterator last,
                                          OutputIterator result,
                                          T init, BinaryOperation binary_op);
```
```
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                          OutputIterator result);
template<class InputIterator, class OutputIterator, class BinaryOperation>
  constexpr OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                          OutputIterator result,
                                          BinaryOperation binary_op);
template<class InputIterator, class OutputIterator, class BinaryOperation, class T>
  constexpr OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                                          OutputIterator result,
                                          BinaryOperation binary_op, T init);
```
```
template<class InputIterator, class OutputIterator, class T,
class BinaryOperation, class UnaryOperation>
  constexpr OutputIterator transform_exclusive_scan(InputIterator first, InputIterator last,
                                                    OutputIterator result,
                                                    T init,
                                                    BinaryOperation binary_op,
                                                    UnaryOperation unary_op);
```
```
template<class InputIterator, class OutputIterator,
         class BinaryOperation, class UnaryOperation>
  constexpr OutputIterator transform_inclusive_scan(InputIterator first, InputIterator last,
                                                    OutputIterator result,
                                                    BinaryOperation binary_op,
                                                    UnaryOperation unary_op);
template<class InputIterator, class OutputIterator,
         class BinaryOperation, class UnaryOperation, class T>
  constexpr OutputIterator transform_inclusive_scan(InputIterator first, InputIterator last,
                                                    OutputIterator result,
                                                    BinaryOperation binary_op,
                                                    UnaryOperation unary_op,
                                                    T init);
```
```
template<class InputIterator, class OutputIterator>
  constexpr OutputIterator adjacent_difference(InputIterator first,
                                               InputIterator last,
                                               OutputIterator result);
template<class InputIterator, class OutputIterator, class BinaryOperation>
  constexpr OutputIterator adjacent_difference(InputIterator first,
                                               InputIterator last,
                                               OutputIterator result,
                                               BinaryOperation binary_op);
```
```
template<class ForwardIterator, class T>
  constexpr void iota(ForwardIterator first, ForwardIterator last, T value);
```

- Change *Accumulate*, 25.9.2 [accumulate] as the synopsis.
- Change *Reduce*, 25.9.3 [reduce] as the synopsis.
- Change *Inner product*, 25.9.4 [inner.product] as the synopsis.
- Change *Transform reduce*, 25.9.5 [transform.reduce] as the synopsis.
- Change *Partial sum*, 25.9.6 [partial.sum] as the synopsis.
- Change *Exclusive scan*, 25.9.7 [exclusive.scan] as the synopsis.
- Change *Inclusive scan*, 25.9.8 [inclusive.scan] as the synopsis.
- Change *Transform exclusive scan*, 25.9.9 [transform.exclusive.scan] as the synopsis.
- Change *Transform inclusive scan*, 25.9.10 [transform.inclusive.scan] as the synopsis.
- Change *Adjacent difference*, 25.9.11 [adjacent.difference] as the synopsis.
- Change *Iota*, 25.9.12 [iota] as the synopsis.
